{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"2PA6BA,SAASA,EAAOC,GACZ,OACQ,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACzCF,EAAMG,O,IAObC,E,2KA6BSC,GAAI,IAAD,OAEZ,OAAO,kBAACN,EAAD,CACPI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAU,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAarC,OACE,6BAEE,yBAAKJ,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GA9DTC,IAAMC,WAuEpBC,E,kDACF,WAAYX,GAAO,IAAD,8BACd,cAAMA,IACDY,MAAQ,CACbC,QAAS,CAAC,CACNN,QAASO,MAAM,GAAGC,KAAK,QAEvBC,WAAY,EACZC,SAAS,GAPC,E,wDAWNZ,GACR,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAa,GAE9DT,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAC5BE,EAAgBb,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKe,SAAS,CACdR,QAASA,EAAQS,OAAO,CAAC,CACrBf,QAASA,KAETS,WAAYH,EAAQM,OACxBF,SAAUX,KAAKM,MAAMK,a,6BAIlBM,GACHjB,KAAKe,SAAS,CACVL,WAAYO,EACZN,QAAUM,EAAO,IAAM,M,+BAIvB,IAgBFC,EAhBC,OACCX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMI,YAC7BU,EAASN,EAAgBK,EAAQlB,SAEjCoB,EAAQd,EAAQe,KAAI,SAACL,EAAKM,GAC5B,IAAMC,EAAOD,EACb,eAAiBA,EACjB,cACA,OACQ,wBAAIE,IAAKF,GACT,4BAAQ3B,QAAW,kBAAM,EAAK8B,OAAOH,KAAQC,OAY3D,OALMN,EADAE,EACS,WAAaA,EAEb,iBAAmBpB,KAAKM,MAAMK,QAAU,IAAM,KAI3D,yBAAKhB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CACEG,QAAWkB,EAAQlB,QACnBL,QAAW,SAACG,GAAD,OAAO,EAAK4B,YAAY5B,OAGvC,yBAAKJ,UAAU,aACX,6BAAMuB,GACR,4BAAKG,S,GArEIlB,IAAMC,WA6EzB,SAASU,EAAgBb,GAWvB,IAVA,IAAM2B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA7B,EAAI,EAAGA,EAAI6B,EAAMf,OAAQd,IAAK,CAAC,IAAD,cACnB6B,EAAM7B,GADa,GAC9B8B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAI9B,EAAQ4B,IAAM5B,EAAQ4B,KAAO5B,EAAQ6B,IAAM7B,EAAQ4B,KAAO5B,EAAQ8B,GACpE,OAAO9B,EAAQ4B,GAGnB,OAAO,KAKTG,IAASC,OACP,kBAAC5B,EAAD,MACA6B,SAASC,eAAe,W","file":"static/js/main.d8dd475c.chunk.js","sourcesContent":["/* Tutorial from: https://reactjs.org/tutorial/tutorial.html\n This tutorial teaches you how to create a simple tic-tac-toe game using React\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n/* Square Class */\n//The Square component renders a single <button>\n/*class Square extends React.Component {\n  //a constructor to the class to initialize the state\n//  constructor (props){\n//    super(props);\n//      this.state = {\n//          value: null,\n//      };\n//    }\n    \n  render() {\n    return (\n            <button className=\"square\"\n            onClick={() => this.props.onClick()}>\n        {this.props.value}\n      </button>\n    );\n  }\n}*/\n\nfunction Square(props) {\n    return (\n            <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n            </button>\n            );\n}\n\n/* Board Class */\n//Board renders 9 squares\nclass Board extends React.Component {\n    //constructor for board - filled with nulls\n    /* Should look as below when filled\n     [\n       'O', null, 'X',\n       'X', 'X', 'O',\n       'O', null, null,\n     ]\n     */\n//    constructor(props) {\n//        super(props);\n//        this.state = {\n//            squares: Array(9).fill(null),\n//            xIsNext: true,\n//        };\n//    }\n    \n//    handleClick(i) {\n//        const squares = this.state.squares.slice();\n//        if(calculateWinner(squares) || squares[i]){\n//            return; //this will exit and ignore clicks if there is a winner\n//        }\n//        squares[i] = this.state.xIsNext ? 'X' : 'O';\n//        this.setState({\n//            squares:squares,\n//            xIsNext: !this.state.xIsNext,\n//        });\n//    }\n    \n  renderSquare(i) {\n    //return <Square />;\n      return <Square\n      value={this.props.squares[i]}\n      onClick= {() => this.props.onClick(i)}/>;\n  }\n\n  render() {\n//      const winner = calculateWinner(this.state.squares);   //check for winner\n//      let status;\n//      if(winner){//if winner, change text to display winner\n//          status = 'Winner: ' + winner;\n//      }\n//      else {//else continue game\n//          status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n//      }\n\n    return (\n      <div>\n       \n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\n/* Game Class*/\n//Game component renders a board with placeholder values\nclass Game extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n        history: [{\n            squares: Array(9).fill(null),\n        }],\n            stepNumber: 0,\n            xIsNext: true,\n        };\n    }\n    \n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]){\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n        history: history.concat([{\n            squares: squares,\n        }]),\n            stepNumber: history.length,\n        xIsNext: !this.state.xIsNext,\n        });\n    }\n    \n    jumpTo(step){\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2)=== 0,\n        });\n    }\n    \n  render() {\n      const history = this.state.history;\n      const current = history[this.state.stepNumber];\n      const winner = calculateWinner(current.squares);\n      \n      const moves = history.map((step,move) => {\n          const desc = move ?\n          'Go to move #' + move :\n          'Go to start';\n          return (\n                  <li key={move}>\n                  <button onClick = {() => this.jumpTo(move)}>{desc}</button>\n                  </li>\n                  )\n      });\n      \n      let status;\n      if (winner){\n          status = 'Winner: ' + winner;\n      } else {\n          status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n      }\n      \n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares = {current.squares}\n            onClick = {(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n            <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n/* Given an array of 9 squares, this function will check for a winner and return 'X', 'O', or null as appropriate. */\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}